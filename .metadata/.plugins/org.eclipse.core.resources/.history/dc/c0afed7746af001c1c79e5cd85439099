package edu.coursera.parallel;

import static edu.rice.pcdp.PCDP.forseq2d;

import edu.rice.pcdp.PCDP;
import edu.rice.pcdp.ProcedureInt1D;

/**
 * Wrapper class for implementing matrix multiply efficiently in parallel.
 */
public final class MatrixMultiply {
    /**
     * Default constructor.
     */
    private MatrixMultiply() {
    }

    /**
     * Perform a two-dimensional matrix multiply (A x B = C) sequentially.
     *
     * @param A An input matrix with dimensions NxN
     * @param B An input matrix with dimensions NxN
     * @param C The output matrix
     * @param N Size of each dimension of the input matrices
     */
    public static void seqMatrixMultiply(final double[][] A, final double[][] B,
            final double[][] C, final int N) {
        forseq2d(0, N - 1, 0, N - 1, (i, j) -> {
            C[i][j] = 0.0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        });
    }

    /**
     * Perform a two-dimensional matrix multiply (A x B = C) in parallel.
     *
     * @param A An input matrix with dimensions NxN
     * @param B An input matrix with dimensions NxN
     * @param C The output matrix
     * @param N Size of each dimension of the input matrices
     */
    public static void parMatrixMultiply(final double[][] A, final double[][] B,
            final double[][] C, final int N) {
        /*
         * TODO Parallelize this outermost two-dimension sequential loop to
         * achieve performance improvement.
         */
    	int chunkSize = N/Runtime.getRuntime().availableProcessors();
    	
    	int numOfTasks = Runtime.getRuntime().availableProcessors();
    	
    	PCDP.forallChunked(0, numOfTasks-1,chunkSize,chunked ->{
    		int startBlock = chunked*chunkSize;
    		int endBlock = (chunked+1)*chunkSize-1;
    		if((chunked+1)*chunkSize-1>N-1) {
    			endBlock=N-1;
    		}
    		System.out.println("StartBlock: "+startBlock);
    		forseq2d(startBlock,endBlock, 0, N - 1, (i, j) -> {
                C[i][j] = 0.0;
                for (int k = 0; k < N; k++) {
                    C[i][j] += A[i][k] * B[k][j];
                }
            });
    	});
    	
    	
//    	forseq2d(0,5, 0, N - 1, (i, j) -> {
//    		System.out.println("I: "+i);
//    		System.out.println("J:"+j);
//            C[i][j] = 0.0;
//            for (int k = 0; k < N; k++) {
//                C[i][j] += A[i][k] * B[k][j];
//            }
//        });
    }
}
